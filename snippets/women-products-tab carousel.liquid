<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Pill Toggle Menu (Mixed: Static & API)</title>
  <style>
    .toggle-menu-container {
      max-width: 1200px;
      margin: 0 auto;
    }
    .toggle-buttons-wrapper {
      display: flex;
      flex-wrap: wrap;
      gap: 18px;
      margin-bottom: 17px;
      justify-content: center;
    }
    .toggle-button {
      background-color: #f6f3f1;
      color: #000;
      border-radius: 12px;
      padding: 3px 15px;
      font-size: 14px;
      cursor: pointer;
      outline: none;
      transition: background-color 0.5s ease, color 0.5s ease;
      white-space: nowrap;
      border: none;
      text-decoration: none;
    }
    .toggle-button.active {
      background-color: #fff;
      color: #000;
    }

    /* ─────────────────────────────────────────────────────
       UNIQUE RED BADGE DOT for Toggle Menu
       ───────────────────────────────────────────────────── */
    .toggle-button.badged { position: relative; }
    .toggle-badge-dot {
      position: absolute;
      top: 5px;
      right: -2px;
      width: 10px;
      height: 10px;
      background: #ff3b30;              /* iOS system red */
      border-radius: 999px;
      box-shadow:
        0 0 0 2px #f6f3f1,              /* ring matches default pill bg */
        0 0 8px rgba(255,59,48,.55);
      animation: badge-bob 0.5s ease-in-out infinite;
      transform-origin: center;
      pointer-events: none;
    }
    .toggle-badge-dot.is-hidden { display: none !important; }
    .toggle-button.badged.active .toggle-badge-dot {
      box-shadow:
        0 0 0 2px #ffffff,
        0 0 8px rgba(255,59,48,.55);
    }

    @keyframes badge-bob {
      0%, 100% { transform: translateY(0); }
      50%      { transform: translateY(-3px); }
    }

    /* ─────────────────────────────────────────────────────
       PRODUCT CARD BADGES
       - Red dot (top-right) for static Top/Bottom cards
       - Green "NEW" pill (top-left) for New/Bestsellers fetched cards
       ───────────────────────────────────────────────────── */
    .menu-item.badged { position: relative; }

    /* RED DOT for static cards */
    .product-badge-dot {
      position: absolute;
      top: 5px;
      right: -2px;               /* same as toggle dot */
      width: 10px;
      height: 10px;
      background: #ff3b30;
      border-radius: 999px;
      box-shadow:
        0 0 0 2px #ffffff,       /* white ring to sit on top of images */
        0 0 8px rgba(255,59,48,.55);
      animation: badge-bob 0.5s ease-in-out infinite;
      transform-origin: center;
      pointer-events: none;
      z-index: 2;
    }

    /* GREEN PILL "NEW" for fetched cards (old style) */
    .product-badge-pill {
      display: flex;
      position: absolute;
      top: 6px;
      left: 5px;
      padding: 2px 6px;
      background: #008001;   /* green pill per your current design */
      border-radius: 3px;
      font-size: 9px;
      color: #fff;
      line-height: 1;
      text-transform: uppercase;
      transform-origin: center;
      pointer-events: none;
      z-index: 2;
      justify-content: flex-start;
    }

    .menu-items-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      justify-content: center;
    }
    @media (max-width: 768px) {
      .toggle-buttons-wrapper .toggle-button:first-of-type {
        margin-left: 160px;
      }
    }
    .menu-item {
      flex: 0 0 calc(20% - 20px);
      text-align: center;
      cursor: pointer;
      background: transparent;
    }
    .menu-item a {
      text-decoration: none;
      color: inherit;
      display: block;
    }
    .menu-item img {
      width: 100%;
      max-width: 220px;
      display: block;
      margin: 0 auto 10px;
      border-radius: 7px;
      opacity: 0; 
      transition: opacity 0.5s ease-in-out;
    }
    .menu-item img.loaded {
      opacity: 1;
    }
    .menu-item p {
      font-size: 15px;
      color: #333;
      margin: 0;
    }
    @media (min-width: 769px) {
      .menu-item img {
        height: 300px;
        object-fit: cover;
      }
    }
    @media (max-width: 768px) {
      .menu-item {
        flex: 0 0 calc(34% - 12px);
      }
      .menu-item img {
        height: 150px;
        object-fit: cover;
      }
      .menu-items-container {
        gap: 6px;
        padding: 0 4px;
      }
      .menu-item p {
        font-size: 12px;
      }
      .toggle-buttons-wrapper {
        flex-wrap: nowrap;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        padding: 0 10px;
        -ms-overflow-style: none;
        scrollbar-width: none;
      }
      .toggle-buttons-wrapper::-webkit-scrollbar {
        display: none;
      }
      .toggle-button {
        flex: 0 0 auto;
      }
    }
    .view-all-bar {
      margin-top: 40px;
      text-align: center;
    }
    .view-all-bar .toggle-button {
      display: inline-block;
      padding: 10px 154px;
      color: #000;
      border: 1px solid #1F1F1D;
      border-radius: 0px;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s;
    }

    @media (hover: hover) and (pointer: fine) {
      .menu-item img {
        transition: 
          transform 0.21s cubic-bezier(.41,1.51,.37,1.11), 
          box-shadow 0.22s cubic-bezier(.41,1.51,.37,1.11);
        will-change: transform, box-shadow;
      }
      .menu-item:hover img,
      .menu-item:focus-within img {
        transform: scale(1.045) rotateZ(-0.7deg);
        box-shadow:
          0 10px 28px 0 rgba(195,106,78,0.21),
          0 2px 8px rgba(195,106,78,0.13);
        z-index: 1;
      }
    }

    @media (hover: hover) and (pointer: fine) {
      .toggle-button {
        transition:
          background 0.22s cubic-bezier(.44,1.34,.38,1.11),
          color 0.22s cubic-bezier(.44,1.34,.38,1.11),
          transform 0.23s cubic-bezier(.44,1.34,.38,1.11),
          box-shadow 0.22s cubic-bezier(.44,1.34,.38,1.11);
        will-change: transform, box-shadow, background, color;
        position: relative;
        z-index: 1;
      }
      .toggle-button:hover,
      .toggle-button:focus-visible {
        background: #fff8f3;
        color: #c36a4e;
        transform: scale(1.07) translateY(-3px);
        box-shadow:
          0 4px 14px 0 rgba(195,106,78,0.21),
          0 1.5px 6px rgba(195,106,78,0.14);
        outline: none;
      }
      .toggle-button.active {
        background: #fff;
        color: #c36a4e;
        transform: scale(1.10);
        box-shadow: 0 1px 4px 0 rgba(195,106,78,0.13);
      }
    }

    @media (hover: hover) and (pointer: fine) {
      .view-all-bar .toggle-button {
        transition:
          background 0.21s cubic-bezier(.44,1.34,.38,1.11),
          color 0.21s cubic-bezier(.44,1.34,.38,1.11),
          box-shadow 0.21s cubic-bezier(.44,1.34,.38,1.11),
          transform 0.21s cubic-bezier(.44,1.34,.38,1.11);
        will-change: background, color, box-shadow, transform;
        border-radius: 7px;
      }
      .view-all-bar .toggle-button:hover,
      .view-all-bar .toggle-button:focus-visible {
        background: #fff8f3;
        color: #c36a4e;
        transform: scale(1.04) translateY(-3px);
        box-shadow:
          0 4px 18px 0 rgba(195,106,78,0.21),
          0 2px 8px rgba(195,106,78,0.13);
        outline: none;
        border: 1.5px solid #c36a4e;
      }
    }
  </style>
</head>
<body>
  <div class="toggle-menu-container">
    <div class="toggle-buttons-wrapper">
      <!-- Category toggles -->
      <button class="toggle-button active badged" data-category="bottoms">
        Bottom Wear
        {% comment %} <span class="toggle-badge-dot" aria-hidden="true"></span> {% endcomment %}
      </button>

      <button class="toggle-button" data-category="bestsellers">Best Sellers</button>

      <button class="toggle-button badged" data-category="new">
        New Arrival
        {% comment %} <span class="toggle-badge-dot" aria-hidden="true"></span> {% endcomment %}
      </button>

      <button class="toggle-button badged" data-category="tops">
        Top Wear
        {% comment %} <span class="toggle-badge-dot" aria-hidden="true"></span> {% endcomment %}
      </button>
    </div>
    <div id="itemsContainer" class="menu-items-container"></div>
    <div class="view-all-bar">
      <a id="viewAllLink" class="toggle-button"
         href="https://saadaa.in/collections/shop-bottoms">
        VIEW ALL ➝
      </a>
    </div>
  </div>

  <script>
    // ─────────── Shopify credentials ───────────
    const SHOP_DOMAIN = "saadaa-design.myshopify.com";
    const STOREFRONT_ACCESS_TOKEN = "388bd37219d8ab7daee1c58a23c03cc8";

    // ─────────── Tag / Static-HTML mappings ───────────
    const tagMap = {
      bestsellers: "women_home_toggle_best_sellers",
      new:         "women_home_new_arrival"
      // “bottoms” + “tops” use static HTML below
    };

    // ─────────── BADGE RULES ───────────
    // Tag-based: add one of these tags on a product to show the NEW badge
    const BADGE_TAGS = [
      "women_home_new_badge",
      "badge-new",
      "highlight-new"
    ];
    // Title-based: for static HTML cards you want to mark
    const BADGE_TITLES = [
      "Airy Linen Straight Pants",
      "Airy-Linen Shirts",
      "Airy Linen Wide Leg Pants"
    ];

    // ─────────── Hard‐coded HTML for Bottom Wear and Top Wear ───────────
    const bottomsHTML =
      '<div class="menu-item">' +
        '<a href="/products/white-straight-fit-formal-pants">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/SDSSPWH_1_8a23a213-e9ff-4ca5-a052-8208ccb3ea30.webp?v=1753438133" alt="SSP" />' +
          '<p>Straight Fit Formal Pants</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/ecru-airy-linen-straight-pants">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/1_6e7a1371-76e6-4b07-bb67-c8b543a35937.webp?v=1756096366" alt="ASP" />' +
          '<p>Airy Linen Straight Pants</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/women-coffee-brown-airy-linen-wide-leg-pant">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/1_9251d01d-9fbe-4474-aac5-bc2a20c847a5.webp?v=1756096682" alt="AWP" />' +
          '<p>Airy Linen Wide Leg Pants</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/ash-4-way-stretchable-pants">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/6_17bf1b01-c39e-42de-b4fe-6fe3b28a036f.jpg?v=1744191968" alt="4-Way" />' +
          '<p>4-Way Stretchable Pants</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/salmon-pink-solid-regular-fit-cotton-trouser">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/SDCPRTRoseTaupe_1_98f96bd0-b954-4ae8-bf62-6d3ba2c0c67f.jpg?v=1744191968" alt="ECP" />' +
          '<p>Everyday Cotton Pants</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/english-blue-viscose-palazzo-pant">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/1_091a3f84-383b-4be2-9537-940997cb565b.jpg?v=1744191968" alt="VPP" />' +
          '<p>Viscose Palazzo Pants</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/maroon-wide-leg-pants">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/Artboard3copy6_4b975e75-38f7-4ad4-8103-f1274fac7a97.png?v=1744191968" alt="WLP" />' +
          '<p>Wide Leg Pants</p>' +
        '</a>' +
      '</div>';

    const topwearHTML =
      '<div class="menu-item">' +
        '<a href="/products/yellow-airy-linen-short-kurta">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/2_635b9b22-0d5b-4da8-892e-e29d45c096ec.webp?v=1744193131" ' +
               'alt="Airy-Linen Short Kurtas" />' +
          '<p>Airy-Linen Short Kurtas</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/hot-pink-airy-linen-long-kurta">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/2_39f6db1e-5354-4d52-9b1a-b723ec43e40e.webp?v=1744193354" ' +
               'alt="Airy Linen Long Kurtas" />' +
          '<p>Airy Linen Long Kurtas</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/black-airy-linen-shirt">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/2_6_daeca3f8-6a4e-46e0-b3d7-6c91bb0a1ebb.webp?v=1744193466" ' +
               'alt="Airy-Linen Shirts" />' +
          '<p>Airy-Linen Shirts</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/rose-v-neck-sleeveless-top">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/1_c1738934-aba3-40a0-920e-bddf4a25311f.webp?v=1744193571" ' +
               'alt="V-Neck Sleeveless Top" />' +
          '<p>V-Neck Sleeveless Top</p>' +
        '</a>' +
      '</div>' +
      '<div class="menu-item">' +
        '<a href="/products/white-viscose-pleated-top">' +
          '<img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/3_0b364a38-824e-4456-9cb2-fbf14b7fcd20.webp?v=1744193776" ' +
               'alt="Viscose Pleated Top" />' +
          '<p>Viscose Pleated Top</p>' +
        '</a>' +
      '</div>';

    // ─────────── VIEW ALL link per category ───────────
    const viewAllLinks = {
      bottoms:     "https://saadaa.in/collections/shop-all-bottoms",
      bestsellers: "https://saadaa.in/collections/best-sellers-women",
      new:         "https://saadaa.in/collections/best-sellers-women",
      tops:        "https://saadaa.in/collections/shop-all-tops-1"
    };

    // ─────────── Cache for “bestsellers” + “new” ───────────
    let cache = {
      bestsellers: [],
      new: []
    };
    let cacheLoaded = {
      bestsellers: false,
      new: false
    };

    // ─────────── Fetch products by Shopify tag (including `publishedAt`) ───────────
    async function fetchProductsByTag(tag) {
      const query = `
        {
          products(first: 30, query: "tag:'${tag}'") {
            edges {
              node {
                id
                title
                handle
                tags
                publishedAt
                images(first: 1) {
                  edges {
                    node {
                      url
                      altText
                    }
                  }
                }
              }
            }
          }
        }
      `;

      const response = await fetch(`https://${SHOP_DOMAIN}/api/2023-10/graphql.json`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Shopify-Storefront-Access-Token": STOREFRONT_ACCESS_TOKEN
        },
        body: JSON.stringify({ query })
      });

      const json = await response.json();
      if (!json.data || !json.data.products) return [];
      // Keep only published products (drafts have null publishedAt)
      return json.data.products.edges
        .map(edge => edge.node)
        .filter(prod => prod.publishedAt);
    }

    // ─────────── Pre‐fetch “bestsellers” + “new” on page load ───────────
    async function prefetchCategory(key) {
      const tag = tagMap[key];
      if (!tag) return;
      const products = await fetchProductsByTag(tag);
      cache[key] = products;
      cacheLoaded[key] = true;
    }
    // Kick off both in parallel:
    prefetchCategory("bestsellers");
    prefetchCategory("new");

    // ─────────── Render products (or static HTML) ───────────
    function renderProducts(itemsHTML, categoryKey) {
      if (categoryKey === "tops") {
        itemsContainer.classList.add("topwear");
      } else {
        itemsContainer.classList.remove("topwear");
      }
      itemsContainer.innerHTML = itemsHTML;

      // Once images load, add “loaded” class so they fade in
      itemsContainer.querySelectorAll("img").forEach(img => {
        if (img.complete) {
          img.classList.add("loaded");
        } else {
          img.addEventListener("load", () => img.classList.add("loaded"));
        }
      });

      // Add/refresh product badges after each render
      addProductBadges();
      // Move badged cards to the front (works for static sections too)
      reorderBadgedFirst();
    }

    // ─────────── Build HTML snippet from an array of fetched products
    // Orders: badged first, then others (preserves your earlier #1 sort result order)
    function buildFetchedHTML(products) {
      const withBadge = [];
      const withoutBadge = [];

      products.forEach(prod => {
        const tags = prod.tags || [];
        const hasNewBadge = tags.some(t => BADGE_TAGS.includes(t));
        const imgUrl = prod.images.edges[0]?.node.url || "";
        const altTxt = prod.images.edges[0]?.node.altText || prod.title;

        const html = `
          <div class="menu-item${hasNewBadge ? ' badged' : ''}" data-title="${prod.title.replace(/"/g, '&quot;')}">
            <a href="/products/${prod.handle}">
              <img src="${imgUrl}" alt="${altTxt}" loading="lazy" />
              <p>${prod.title}</p>
            </a>
            ${hasNewBadge ? '<span class="product-badge-pill" aria-hidden="true">NEW</span>' : ''}
          </div>
        `;

        (hasNewBadge ? withBadge : withoutBadge).push(html);
      });

      return withBadge.concat(withoutBadge).join("");
    }

    // ─────────── Add badges to static cards by title; fetched items already handled ───────────
    function addProductBadges() {
      document.querySelectorAll('#itemsContainer .menu-item').forEach(card => {
        const hasBadge = !!card.querySelector('.product-badge-dot, .product-badge-pill');
        const title = (card.querySelector('p')?.textContent || '').trim();

        // For static blocks (Bottoms/Tops), badge by title if listed:
        if (!hasBadge && BADGE_TITLES.includes(title)) {
          card.classList.add('badged');
          const dot = document.createElement('span');
          dot.className = 'product-badge-dot'; // red bouncing dot
          dot.setAttribute('aria-hidden', 'true');
          card.appendChild(dot);
        }

        // If neither tag nor title requires a badge and none exists, keep clean:
        if (!hasBadge && !BADGE_TITLES.includes(title)) {
          card.classList.remove('badged');
          card.querySelector('.product-badge-dot, .product-badge-pill')?.remove();
        }
      });
    }

    // ─────────── Reorder DOM so badged cards appear first (works for static + fetched) ───────────
    function reorderBadgedFirst() {
      const container = itemsContainer;
      const cards = Array.from(container.children);
      const badged = cards.filter(c => c.querySelector('.product-badge-dot, .product-badge-pill'));
      const normal = cards.filter(c => !c.querySelector('.product-badge-dot, .product-badge-pill'));

      container.innerHTML = '';
      badged.concat(normal).forEach(el => container.appendChild(el));
    }

    // ─────────── Handle toggle‐button clicks ───────────
    const itemsContainer = document.getElementById("itemsContainer");
    const toggleButtons  = document.querySelectorAll(".toggle-button[data-category]");
    const viewAllLinkElm = document.getElementById("viewAllLink");

    toggleButtons.forEach(btn => {
      btn.addEventListener("click", async () => {
        // 1) Reset “active” class
        toggleButtons.forEach(b => b.classList.remove("active"));
        btn.classList.add("active");

        // 2) Determine which category was clicked
        const key = btn.getAttribute("data-category");
        viewAllLinkElm.href = viewAllLinks[key]; // update “VIEW ALL”

        // 3) If “bottoms” or “tops,” just show static HTML
        if (key === "bottoms") {
          renderProducts(bottomsHTML, key);
          return;
        }
        if (key === "tops") {
          renderProducts(topwearHTML, key);
          return;
        }

        // 4) Otherwise (bestsellers / new), render from cache immediately
        if (key === "bestsellers" || key === "new") {
          // If cache not yet ready, show a quick “loading” message
          if (!cacheLoaded[key]) {
            renderProducts(`<div class="no-results">Loading…</div>`, key);
            // Wait for prefetch to complete
            await prefetchCategory(key);
          }

          // Keep your #1-tag sort
          const products = cache[key].slice(); // copy array
          if (key === "bestsellers") {
            products.sort((a, b) => {
              const aHas = a.tags.includes("women_home_toggle_best_sellers-#1");
              const bHas = b.tags.includes("women_home_toggle_best_sellers-#1");
              if (aHas && !bHas) return -1;
              if (bHas && !aHas) return 1;
              return 0;
            });
          }
          if (key === "new") {
            products.sort((a, b) => {
              const aHas = a.tags.includes("women_home_new_arrival-#1");
              const bHas = b.tags.includes("women_home_new_arrival-#1");
              if (aHas && !bHas) return -1;
              if (bHas && !aHas) return 1;
              return 0;
            });
          }

          // Build HTML (badged first), then render
          const fetchedHTML = buildFetchedHTML(products);
          renderProducts(fetchedHTML, key);
        }
      });
    });

    // ─────────── Initial load: “Bottom Wear” by default ───────────
    (async () => {
      const defaultKey = "bottoms";
      document.querySelector(`.toggle-button[data-category="${defaultKey}"]`).classList.add("active");
      viewAllLinkElm.href = viewAllLinks[defaultKey];
      renderProducts(bottomsHTML, defaultKey);
    })();
  </script>
</body>
</html>
