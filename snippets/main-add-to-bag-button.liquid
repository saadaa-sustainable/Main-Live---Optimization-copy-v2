 {% comment %} <style>
.action-row {
  display: flex;
  align-items: center;
  gap: 12px;
  width: 100%;
}
.inline-size-atc .atc-form {
  flex: 1 1 0%;
  margin: 0;
  display: flex;
}
.inline-size-atc .scb-main-btn {
  width: 100%;
  justify-content: center;
}

.inline-size-atc__row {
  display: flex;
  align-items: center;
  gap: 18px;
  margin-bottom: 18px;
  flex-wrap: wrap;
  justify-content: flex-start;
}
.action-row {
  display: grid;
  align-items: center;
  gap: 12px;
}
.inline-size-label-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 7px;
}
.inline-size-atc .overlay-title {
  font-size: 17px;
  text-transform: uppercase;
  color: #222;
  font-weight: 600;
}
.inline-size-atc .variant-container {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: center;
}
.inline-size-atc .variant-wrapper {
  min-width: 44px;
  position: relative;
}
.inline-size-atc .variant-btn {
  width: 2.6rem;
  height: 2.6rem;
  font-size: 14px;
  border-radius: 50%;
  border: 1px solid #000;
  background: #fff;
  color: #000;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.3s, border-color 0.3s;
  padding: 0;
}
.inline-size-atc .variant-btn.selected {
  background: #fff8a5;
  border-color: #000;
}
.inline-size-atc .variant-btn.out-of-stock,
.inline-size-atc .variant-btn[disabled] {
  color: #000;
  border-color: #000;
  cursor: not-allowed;
  position: relative;
  opacity: 0.5;
  pointer-events: none; /* make it truly unclickable */
}
.inline-size-atc .variant-btn.out-of-stock::before,
.inline-size-atc .variant-btn[disabled]::before {
  content: "";
  position: absolute;
  top: 0;
  left: 49%;
  width: 2px;
  height: 97%;
  background: #000;
  transform: rotate(51deg) translateX(50%);
  pointer-events: none;
}
.inline-size-atc .stock-message {
  position: absolute;
  top: 100%;
  width: 100%;
  font-size: 8px;
  font-weight: bold;
  text-align: center;
  line-height: 1.2;
  display: none;
}
.inline-size-atc .few-left { color: orange; }
.inline-size-atc .only-left { color: red; }
.inline-size-atc .variant-btn.selected ~ .stock-message {
  display: block;
}
.inline-size-atc .scb-main-btn {
        flex: 1;
        padding: 16px 0;
        border: none;
        font-size: 15px;
        font-weight: 600;
        cursor: pointer;
        text-align: center;
        background: #111;
        color: #fff;
        border-radius: 45px;
        letter-spacing: 1px;
        transition: background 0.2s, transform 0.1s;
        display: flex
;
        align-items: center;
        justify-content: center;
        gap: 7px;
        white-space: nowrap;
    }
.inline-size-atc .wishlist-icon-container {
  display: flex;
  align-items: center;
  border: 1px solid;
  border-radius: 0;
}
.inline-size-atc .bag-icon svg { vertical-align: middle; }
@media (max-width: 767px) {
  .inline-size-atc__row { flex-wrap: wrap; gap: 10px; }
  .inline-size-atc .variant-container { flex-wrap: wrap; }
}



  /* ----- Guarantee section ----- */
  .guarantee-hstack { display: flex; align-items: center; justify-content: center; margin: 0 auto; }
  .guarantee-gap { gap: 0.375rem; }
  .guarantee-tooltip { position: relative; display: inline-block; cursor: pointer; }
  .guarantee-tooltip .guarantee-tooltip-text {
    position: absolute;
    bottom: calc(100% + 8px);
    left: -376%;
    transform: translateX(-50%);
    background: #fff;
    color: #000;
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    padding: 8px 12px;
    border-radius: 6px;
    width: 234px;
    text-align: center;
    font-size: 11px;
    line-height: 1.4;
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
    z-index: 1000;
  }
  .guarantee-tooltip .guarantee-tooltip-text::before {
    content: "";
    position: absolute;
    top: 100%;
    left: 74%;
    transform: translateX(-50%);
    border: 8px solid transparent;
    border-top-color: rgba(0, 0, 0, 0.1);
  }
  .guarantee-tooltip .guarantee-tooltip-text::after {
    content: "";
    position: absolute;
    top: calc(100% - 1px);
    left: 74%;
    transform: translateX(-50%);
    border: 7px solid transparent;
    border-top-color: #fff;
  }
  .guarantee-tooltip.guarantee-active .guarantee-tooltip-text {
    visibility: visible;
    opacity: 1;
  }
@media (max-width: 767px){
#tooltip{
  display:none;
}
}

</style>

<div class="inline-size-atc atc-main">
  <div class="inline-size-label-row">
    <span class="overlay-title">SIZE:</span>
    <div id="KiwiSizingChart" data-display-mode="2"></div>
  </div>
  <div class="inline-size-atc__row">
    <!-- Size Options (left) -->
    <div class="variant-container">
      {% for variant in product.variants %}
        <div class="variant-wrapper">
          <button 
            type="button"
            class="variant-btn{% if variant.inventory_quantity == 0 %} out-of-stock{% endif %}"
            {% if variant.inventory_quantity == 0 %}disabled aria-disabled="true"{% endif %}
            data-value="{{ variant.option1 }}"
            data-variant-id="{{ variant.id }}" 
            data-quantity="{{ variant.inventory_quantity }}"
          >
            {{ variant.option1 }}
          </button>
          <p class="stock-message">
            {% if variant.inventory_quantity > 5 and variant.inventory_quantity <= 8 %}
              <span class="few-left">Only Few Left!</span>
            {% elsif variant.inventory_quantity <= 5 and variant.inventory_quantity > 0 %}
              <span class="only-left">Only {{ variant.inventory_quantity }} Left!</span>
            {% endif %}
          </p>
        </div>
      {% endfor %}
    </div>

    <!-- ATC Button (right) -->
<div class="action-row">
  <form action="/cart/add" method="post" enctype="multipart/form-data" class="atc-form" style="margin:0;">
    <input type="hidden" name="id" id="variantId" value="" disabled>
    <button type="submit" class="scb-main-btn" disabled aria-disabled="true">
      <span class="bag-icon" style="display:inline-block;vertical-align:middle;margin-right:8px;">
        <svg width="22" height="22" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24" style="position:relative;bottom:3px;">
          <path d="M4.75 8.25A.75.75 0 0 0 4 9L3 19.125c0 1.418 1.207 2.625 2.625 2.625h12.75c1.418 0 2.625-1.149 2.625-2.566L20 9a.75.75 0 0 0-.75-.75H4.75Zm2.75 0v-1.5a4.5 4.5 0 0 1 4.5-4.5v0a4.5 4.5 0 0 1 4.5 4.5v1.5" />
        </svg>
      </span>
      ADD TO BAG
    </button>
  </form>
</div>







  <div class="guarantee-hstack guarantee-gap" id="tooltip" style="margin-top:10px;">
    <svg stroke="rgb(34, 197, 160)" fill="rgb(34, 197, 160)" stroke-width="0"
         viewBox="0 0 16 16" role="presentation" height="20px" width="20px"
         xmlns="http://www.w3.org/2000/svg">
      <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 
               0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 
               0 0 0-1.06 1.06L6.97 11.03a.75.75 
               0 0 0 1.079-.02l3.992-4.99a.75.75 
               0 0 0-.01-1.05z"></path>
    </svg>
    <span style="font-size:13px;position: relative;top: 1px;">
      7-Day Money Back Guarantee
    </span>
    <div class="guarantee-tooltip">
      <img
        src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/Group_2.svg?v=1747286143"
        alt="info"
        style="width:13px; height:13px; display:block;"
      />
      <div class="guarantee-tooltip-text">
        Return or exchange within 7 days of delivery. Product must be unused with original packaging intact.
      </div>
    </div>
  </div>
</div>




<script>
(function () {
  function initInlineATC(root) {
    const block = root.querySelector('.atc-main');
    if (!block || block.dataset.inited === '1') return;
    block.dataset.inited = '1';

    const form         = block.querySelector('form.atc-form');
    const variantInput = form && (form.querySelector('#variantId') || form.querySelector('[name="id"]'));
    const mainBtn      = form && form.querySelector('.scb-main-btn');
    const sizeError    = block.querySelector('#sizeError');
    if (!form || !variantInput || !mainBtn) return;

    // START: ensure nothing can add to cart yet
    variantInput.value = '';
    variantInput.disabled = true;
    mainBtn.disabled = true;
    mainBtn.setAttribute('aria-disabled', 'true');
    // END

    function showSizeError() {
      if (!sizeError) return;
      sizeError.classList.add('show');
      mainBtn.setAttribute('aria-describedby', 'sizeError');
    }
    function hideSizeError() {
      if (!sizeError) return;
      sizeError.classList.remove('show');
      mainBtn.removeAttribute('aria-describedby');
    }
    function isSizeChosen() {
      return !!block.querySelector('.variant-btn.selected');
    }

    function guard(e) {
      if (!isSizeChosen()) {
        e.preventDefault();
        e.stopPropagation();
        if (e.stopImmediatePropagation) e.stopImmediatePropagation();
        showSizeError();
        mainBtn.focus();
        return false;
      }
      hideSizeError();
      return true;
    }
    form.addEventListener('submit', guard, true);
    mainBtn.addEventListener('click', guard, true);

    form.addEventListener('submit', function (e) {
      if (!isSizeChosen()) return;
      e.preventDefault();

      const formData = new FormData(form);
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
        headers: { 'Accept': 'application/json' }
      })
      .then(r => r.json())
      .then(function () {
        if (window.GOKWIK?.cart?.open) {
          window.GOKWIK.cart.open();
        } else if (window.GK?.cart?.open) {
          window.GK.cart.open();
        }
      })
      .catch(console.error);
    });

    block.querySelectorAll('.variant-btn').forEach(button => {
      button.addEventListener('click', function () {
        if (this.classList.contains('out-of-stock') || this.disabled) return;

        hideSizeError();

        block.querySelectorAll('.variant-btn').forEach(b => b.classList.remove('selected'));
        this.classList.add('selected');

        const selectedVariantId = this.getAttribute('data-variant-id');

        // enable input + button only after a real choice
        variantInput.disabled = false;
        variantInput.value = selectedVariantId;
        mainBtn.disabled = false;
        mainBtn.removeAttribute('aria-disabled');

        variantInput.dispatchEvent(new Event('change', { bubbles: true }));
      });
    });

    variantInput.addEventListener('change', function () {
      const btn = block.querySelector('.variant-btn[data-variant-id="' + variantInput.value + '"]');
      block.querySelectorAll('.variant-btn').forEach(b => b.classList.remove('selected'));

      if (btn && !btn.classList.contains('out-of-stock') && !btn.disabled) {
        btn.classList.add('selected');
        mainBtn.disabled = false;
        mainBtn.removeAttribute('aria-disabled');
        variantInput.disabled = false;
      } else {
        // if invalid/cleared, hard-disable again
        variantInput.value = '';
        variantInput.disabled = true;
        mainBtn.disabled = true;
        mainBtn.setAttribute('aria-disabled', 'true');
      }
      hideSizeError();
    });
  }

  function initAll() { initInlineATC(document); }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAll);
  } else {
    initAll();
  }
  document.addEventListener('shopify:section:load', e => initInlineATC(e.target));
  document.addEventListener('shopify:section:select', e => initInlineATC(e.target));
})();

</script> {% endcomment %}



{% comment %} NEW CODE THAT FETCHES VALUE FROM KIWI {% endcomment %}





{%- comment -%} ===== Dynamic size label rules =====
Bottomwear (any gender)  -> Waist Size
Women topwear            -> Bust Size
Men topwear              -> Chest Size
Fallback                 -> Size
{%- endcomment -%}
{%- assign haystack = '' -%}
{%- assign haystack = haystack
  | append: product.type | append: ','
  | append: product.title | append: ','
  | append: product.vendor | append: ','
  | append: product.handle | append: ','
  | append: product.tags | join: ',' 
  | downcase -%}

{%- assign is_bottom = false -%}
{%- assign bottoms = 'bottomwear|bottom wear|trouser|trousers|pant|pants|jean|jeans|jogger|joggers|chino|chinos|legging|leggings|palazzo|skirt|culotte|cargo pant|cargo pants|track pant|track pants|shorts|bermuda|capri' | split: '|' -%}
{%- for kw in bottoms -%}
  {%- if haystack contains kw -%}
    {%- assign is_bottom = true -%}
    {%- break -%}
  {%- endif -%}
{%- endfor -%}


{%- assign is_top = false -%}
{%- if haystack contains 'topwear'
   or haystack contains 'top wear'
   or haystack contains 'shirt'
   or haystack contains 't-shirt'
   or haystack contains 'tshirt'
   or haystack contains 'tee'
   or haystack contains 'kurta'
   or haystack contains 'blouse'
   or haystack contains 'sweatshirt'
   or haystack contains 'hoodie'
   or haystack contains 'jacket'
   or haystack contains 'top'
   or haystack contains 'dress'
-%}{%- assign is_top = true -%}{%- endif -%}

{%- assign is_women = false -%}
{%- if haystack contains 'women'
   or haystack contains "women's"
   or haystack contains 'womens'
   or haystack contains 'ladies'
   or haystack contains 'female'
   or haystack contains 'girl'
-%}{%- assign is_women = true -%}{%- endif -%}

{%- assign is_men = false -%}
{%- if haystack contains 'men '
   or haystack contains "men's"
   or haystack contains 'mens'
   or haystack contains 'gents'
   or haystack contains 'male'
   or haystack contains 'boy'
-%}{%- assign is_men = true -%}{%- endif -%}

{%- assign size_label = 'Size' -%}
{%- if is_bottom -%}
  {%- assign size_label = 'Waist Size' -%}
{%- elsif is_top and is_women -%}
  {%- assign size_label = 'Bust Size' -%}
{%- elsif is_top and is_men -%}
  {%- assign size_label = 'Chest Size' -%}
{%- endif -%}



<style>
/* ===== Base ===== */
.action-row {
  display: grid;
  align-items: center;
  gap: 12px;
  width: 100%;
}

.inline-size-atc .atc-form {
  flex: 1 1 0%;
  margin: 0;
  display: flex;
}

.inline-size-atc .scb-main-btn {
  width: 100%;
  justify-content: center;
}

.inline-size-atc__row {
  display: flex;
  align-items: center;
  gap: 18px;
  margin-bottom: 18px;
  flex-wrap: wrap;
  justify-content: flex-start;
}

.inline-size-label-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 7px;
}

.inline-size-atc .overlay-title {
  font-size: 14px;
  color: #222;
  font-weight: 600;
}

.inline-size-atc .variant-wrapper {
  position: relative;
  min-width: 0;
}

.inline-size-atc .scb-main-btn {
  flex: 1;
  padding: 16px 0;
  border: none;
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  text-align: center;
  background: #111;
  color: #fff;
  border-radius: 45px;
  letter-spacing: 1px;
  transition: background 0.2s, transform 0.1s;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 7px;
  white-space: nowrap;
}

.inline-size-atc .bag-icon svg {
  vertical-align: middle;
}

/* ===== Guarantee (unchanged) ===== */
.guarantee-hstack {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto;
}

.guarantee-gap {
  gap: .375rem;
}

.guarantee-tooltip {
  position: relative;
  display: inline-block;
  cursor: pointer;
}

.guarantee-tooltip .guarantee-tooltip-text {
  position: absolute;
  bottom: calc(100% + 8px);
  left: -376%;
  transform: translateX(-50%);
  background: #fff;
  color: #000;
  border: 1px solid rgba(0, 0, 0, .1);
  box-shadow: 0 4px 12px rgba(0, 0, 0, .15);
  padding: 8px 12px;
  border-radius: 6px;
  width: 234px;
  text-align: center;
  font-size: 11px;
  line-height: 1.4;
  visibility: hidden;
  opacity: 0;
  transition: opacity .2s ease-in-out;
  z-index: 1000;
}

.guarantee-tooltip .guarantee-tooltip-text::before {
  content: "";
  position: absolute;
  top: 100%;
  left: 74%;
  transform: translateX(-50%);
  border: 8px solid transparent;
  border-top-color: rgba(0, 0, 0, .1);
}

.guarantee-tooltip .guarantee-tooltip-text::after {
  content: "";
  position: absolute;
  top: calc(100% - 1px);
  left: 74%;
  transform: translateX(-50%);
  border: 7px solid transparent;
  border-top-color: #fff;
}

.guarantee-tooltip.guarantee-active .guarantee-tooltip-text {
  visibility: visible;
  opacity: 1;
}

/* ===== Grid (new look) ===== */
.inline-size-atc .variant-container {
  display: grid;
  grid-template-columns: repeat(4, minmax(0, 1fr));
  gap: 12px;
  width: 100%;
  margin-top: 0px;
  padding-bottom: 10px;
}

@media (max-width: 640px) {
  .inline-size-atc .variant-container {
    grid-template-columns: repeat(5, minmax(0, 1fr));
    gap: 10px;
  }

  .inline-size-atc .variant-btn {
    padding: 4px 0;
    border-radius: 0;
  }

  .inline-size-atc .variant-btn .sz-code {
    font-size: 12.5px;
  }

  .inline-size-atc .variant-btn .sz-extra {
    font-size: 11.5px;
  }
}

/* ===== Square cards ===== */
.inline-size-atc .variant-btn {
  margin-bottom: 8px;
  width: 100%;
  height: auto;
  padding: 4px 0;
  border-radius: 0;
  border: 1px solid #111;
  background: #fff;
  color: #111;
  display: grid;
  grid-template-rows: auto auto;
  justify-items: center;
  align-items: center;
  gap: 6px;
  line-height: 1.15;
  cursor: pointer;
  position: relative;
  transition: border-color 0.2s, box-shadow 0.2s, background 0.2s;
}

.inline-size-atc .variant-btn .sz-code {
  font-size: 12.5px;
  font-weight: 600;
  letter-spacing: .2px;
  text-transform: uppercase;
}

.inline-size-atc .variant-btn .sz-extra {
  font-size: 11.5px;
  opacity: .95;
  white-space: nowrap;
}

/* ===== OOS with diagonal slash ===== */
.inline-size-atc .variant-btn.out-of-stock,
.inline-size-atc .variant-btn[disabled] {
  opacity: .55;
  cursor: not-allowed;
}

.inline-size-atc .variant-btn.out-of-stock::before,
.inline-size-atc .variant-btn[disabled]::before {
  content: "";
  position: absolute;
  top: -11px;
  bottom: 6px;
  left: 48%;
  width: 1px;
  background: #111;
  transform: rotate(55deg);
  height: 67px;
}

/* ===== Stock note (old behavior) ===== */
.inline-size-atc .stock-message {
  position: absolute;
  top: 100%;
  width: 100%;
  font-size: 9px;
  font-weight: 700;
  text-align: center;
  line-height: 0.2;
  display: none;
}

.inline-size-atc .variant-btn.selected~.stock-message {
  display: block;
}

.inline-size-atc .few-left { color: orange; }
.inline-size-atc .only-left { color: red; }

/* Keep swatches clickable */
.inline-size-atc .variant-btn { pointer-events: auto !important; }

/* ===== Selected-size readout (Kiwi) — compact grey chips under title ===== */
.inline-size-meta {
  display: flex;
  align-items: center;
  gap: 8px;
  flex-wrap: wrap;
  font-size: 10px;
  color: #111;
  background: #f2f4f7; /* soft grey bar */
  border: 0;
  border-radius: 6px;
  padding: 6px 8px;
  margin: 12px 0 12px 0;
   justify-content: center;
}

.inline-size-meta .kv-pill {
  display: inline-block;
  padding: 4px 2px;
  border: 0;
  border-radius: 6px;
  line-height: 1;
  white-space: nowrap;
}

.inline-size-meta .kv-key {
  font-weight: 700;
  margin-right: 4px;
}

/* Add the "|" separator automatically */
.inline-size-meta .kv-pill:not(:last-child)::after {
  content: " | ";
  color: #555;
  margin: 0 4px;
}

/* ===== Size Chart Trigger ===== */
.ks-open-btn {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  font-size: 12px;
  text-transform: uppercase;
  color: #111;
  background: transparent;
  border: 0;
  cursor: pointer;
  text-decoration: underline;
  padding: 4px 2px;
}

.ks-open-btn .ks-pen {
  width: 16px;
  height: 16px;
  display: inline-block;
}

/* ===== Custom Size Chart Modal (Kiwi-fed) ===== */
.ksc-backdrop {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, .5);
  z-index: 2500;
  display: none;
}

.ksc-modal {
  position: fixed;
  left: 50%;
  top: 43%;
  transform: translate(-50%, -50%);
  width: min(680px, 92vw);
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, .25);
  z-index: 2510;
  display: none;
}

.ksc-head {
  padding: 16px 18px 10px;
  text-align: center;
  border-bottom: 1px solid #ddd;
}

.ksc-title {
  font-weight: 700;
  font-size: 15px;
  line-height: 1.25;
  margin: 0 26px;
}

.ksc-sub {
  font-size: 14px;
  color: #555;
  margin-top: 4px;
}

.ksc-close {
  position: absolute;
  right: 3px;
  top: 0px;
  background: transparent;
  border: 0;
  cursor: pointer;
  font-size: 23px;
  line-height: 1;
  width: 38px;
  height: 38px;
}

.ksc-body {
  padding: 10px 16px 10px;
}

.ksc-note {
  margin: 10px 2px 0px;
  font-size: 13px;
  font-weight: 700;
  color: #111;
}

.ksc-foot { padding: 10px 16px 16px; }

.ksc-add {
  width: 100%;
  padding: 8px 0;
  border: none;
  border-radius: 999px;
  background: #111;
  color: #fff;
  font-weight: 700;
  letter-spacing: 1px;
  cursor: pointer;
  font-size: 15px;
}

.ksc-table-wrap { overflow: auto; border-radius: 2px; }

.ksc-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 11px;
}

.ksc-table th,
.ksc-table td {
  border: 1px solid #888188;
  padding: 4px 4px;
  text-align: center;
  white-space: nowrap;
  font-size: 11px;
  color: #000;
}

.ksc-table th {
  font-weight: 700;
  background: #fafafa;
}

.ksc-radio { width: 30px; text-align: center; }

.ksc-table tr[aria-disabled="true"] { opacity: .55; }
.ksc-table tr.selected { outline: 2px solid #111; outline-offset: -2px; }

/* Mobile: modal full-width feel */
@media (max-width: 768px) {
  .ksc-modal {
    width: 93vw;
    max-height: 78vh;
    overflow: auto;
  }
}

/* Disable background scroll when modal is open */
body.modal-open { overflow: hidden; }

@media (min-width: 768px) {
  .inline-size-atc .variant-container {
    display: grid;
    grid-template-columns: repeat(6, minmax(0, 1fr));
  }
  .ksc-modal { top: 53%; }
  .ksc-table th, .ksc-table td { font-size: 15px; }


  .inline-size-meta {
    
    font-size: 12px;
 
}
}
</style>

<div class="inline-size-atc atc-main" data-cache-key="{{ product.handle | default: request.path | escape }}">
  <div class="inline-size-label-row">
    <span class="overlay-title">{{ size_label }}:</span>

    <button type="button" class="ks-open-btn" data-ks-context="main">
      <svg class="ks-pen" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512.002 512.002"><path d="M509.502 104.908L407.097 2.502c-3.337-3.337-8.73-3.337-12.067 0L2.502 395.03c-3.337 3.337-3.337 8.73 0 12.067l102.405 102.405c1.596 1.604 3.772 2.5 6.033 2.5s4.43-.896 6.033-2.5L509.5 116.975c1.604-1.596 2.5-3.772 2.5-6.033s-.894-4.43-2.498-6.034zM110.94 491.402l-90.338-90.338 380.46-380.46L491.4 110.94 110.94 491.4zm298.7-414.605c-14.115 0-25.6 11.486-25.6 25.6s11.486 25.6 25.6 25.6 25.6-11.486 25.6-25.6-11.486-25.6-25.6-25.6zm0 34.135c-4.7 0-8.534-3.832-8.534-8.534s3.823-8.534 8.534-8.534 8.534 3.832 8.534 8.534-3.823 8.534-8.534 8.534z"></path></svg>
      SIZE CHART
    </button>
    <!-- hidden kiwi trigger so we can force-load content if needed -->
    <div id="KiwiSizingChart" data-display-mode="2" style="display:none"></div>
  </div>

  <div class="inline-size-meta" aria-live="polite" hidden></div>

  <div class="inline-size-atc__row">
    <div class="variant-container">
      {% for variant in product.variants %}
        <div class="variant-wrapper">
          <button
            type="button"
            class="variant-btn{% if variant.inventory_quantity == 0 %} out-of-stock{% endif %}"
            {% if variant.inventory_quantity == 0 %}disabled aria-disabled="true"{% endif %}
            data-value="{{ variant.option1 }}"
            data-variant-id="{{ variant.id }}"
            data-quantity="{{ variant.inventory_quantity }}"
          >
            <span class="sz-code">{{ variant.option1 }}</span>
            <span class="sz-extra"></span>
          </button>
          <p class="stock-message">
            {% if variant.inventory_quantity > 5 and variant.inventory_quantity <= 8 %}
              <span class="few-left">Only Few Left!</span>
            {% elsif variant.inventory_quantity <= 5 and variant.inventory_quantity > 0 %}
              <span class="only-left">Only {{ variant.inventory_quantity }} Left!</span>
            {% endif %}
          </p>
        </div>
      {% endfor %}
    </div>

    <div id="out-of-stock-alert" style="display:none; color:red; font-size:14px; font-weight:600; text-align:center;"></div>

    <div class="action-row">
      <form action="/cart/add" method="post" enctype="multipart/form-data" class="atc-form" style="margin:0;">
        <input type="hidden" name="id" id="variantId" value="" disabled>
        <button type="submit" class="scb-main-btn" disabled aria-disabled="true">
          <span class="bag-icon" style="display:inline-block;vertical-align:middle;margin-right:8px;">
            <svg width="22" height="22" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24" style="position:relative;bottom:3px;">
              <path d="M4.75 8.25A.75.75 0 0 0 4 9L3 19.125c0 1.418 1.207 2.625 2.625 2.625h12.75c1.418 0 2.625-1.149 2.625-2.566L20 9a.75.75 0 0 0-.75-.75H4.75Zm2.75 0v-1.5a4.5 4.5 0 0 1 4.5-4.5v0a4.5 4.5 0 0 1 4.5 4.5v1.5" />
            </svg>
          </span>
          ADD TO BAG
        </button>
      </form>
    </div>
  </div>

  {% comment %} <div class="guarantee-hstack guarantee-gap" style="margin-top:10px;">
    <svg stroke="rgb(34, 197, 160)" fill="rgb(34, 197, 160)" stroke-width="0" viewBox="0 0 16 16" role="presentation" height="20px" width="20px" xmlns="http://www.w3.org/2000/svg">
      <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"></path>
    </svg>
    <span style="font-size:13px;position: relative;top: 1px;">7-Day Money Back Guarantee</span>
    <div class="guarantee-tooltip">
      <img src="https://cdn.shopify.com/s/files/1/0450/3476/6485/files/Group_2.svg?v=1747286143" alt="info" style="width:13px;height:13px;display:block;">
      <div class="guarantee-tooltip-text">Return or exchange within 7 days of delivery. Product must be unused with original packaging intact.</div>
    </div>
  </div>
</div> {% endcomment %}

<!-- Modal -->
<div class="ksc-backdrop" id="ksc-backdrop"></div>
<div class="ksc-modal" id="ksc-modal" role="dialog" aria-modal="true" aria-labelledby="ksc-title">
  <button class="ksc-close" aria-label="Close">&times;</button>
  <div class="ksc-head">
    <h3 class="ksc-title" id="ksc-title"></h3>
    <div class="ksc-sub">Size Charts</div>
  </div>
  <div class="ksc-body">
    <div class="ksc-table-wrap"><table class="ksc-table"></table></div>
    <div class="ksc-note" id="ksc-note" hidden></div>
  </div>
  <div class="ksc-foot">
    <button class="ksc-add" id="ksc-add">ADD TO CART</button>
  </div>
</div>

<script>
/* ===== Add-to-cart & selection ===== */
(function(){
  function initInlineATC(root){
    const block=root.querySelector('.atc-main');
    if(!block||block.dataset.inited==='1')return;
    block.dataset.inited='1';

    const form=block.querySelector('form.atc-form');
    const variantInput=form&&(form.querySelector('#variantId')||form.querySelector('[name="id"]'));
    const mainBtn=form&&form.querySelector('.scb-main-btn');
    if(!form||!variantInput||!mainBtn)return;

    variantInput.value='';variantInput.disabled=true;mainBtn.disabled=true;mainBtn.setAttribute('aria-disabled','true');

    function isSizeChosen(){return !!block.querySelector('.variant-btn.selected')}
    function guard(e){
      if(!isSizeChosen()){
        e.preventDefault();e.stopPropagation();if(e.stopImmediatePropagation)e.stopImmediatePropagation();mainBtn.focus();return false
      }
      return true
    }
    form.addEventListener('submit',guard,true);
    mainBtn.addEventListener('click',guard,true);

    form.addEventListener('submit',function(e){
      if(!isSizeChosen())return;
      e.preventDefault();
      const formData=new FormData(form);
      fetch('/cart/add.js',{method:'POST',body:formData,headers:{'Accept':'application/json'}})
      .then(r=>r.json())
      .then(function(){
        if(window.GOKWIK?.cart?.open){window.GOKWIK.cart.open()}
        else if(window.GK?.cart?.open){window.GK.cart.open()}
      }).catch(console.error);
    });

    block.querySelectorAll('.variant-btn').forEach(btn=>{
      btn.addEventListener('click',function(){
        if(this.classList.contains('out-of-stock')||this.disabled)return;
        block.querySelectorAll('.variant-btn').forEach(b=>b.classList.remove('selected'));
        this.classList.add('selected');
        const id=this.getAttribute('data-variant-id');
        variantInput.disabled=false;variantInput.value=id;mainBtn.disabled=false;mainBtn.removeAttribute('aria-disabled');
        variantInput.dispatchEvent(new Event('change',{bubbles:true}));
      });
    });

    variantInput.addEventListener('change',function(){
      const btn=block.querySelector('.variant-btn[data-variant-id="'+variantInput.value+'"]');
      block.querySelectorAll('.variant-btn').forEach(b=>b.classList.remove('selected'));
      if(btn && !btn.classList.contains('out-of-stock') && !btn.disabled){
        btn.classList.add('selected');mainBtn.disabled=false;mainBtn.removeAttribute('aria-disabled');variantInput.disabled=false;
      }else{
        variantInput.value='';variantInput.disabled=true;mainBtn.disabled=true;mainBtn.setAttribute('aria-disabled','true');
      }
    });
  }
  function initAll(){initInlineATC(document)}
  if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',initAll)}else{initAll()}
  document.addEventListener('shopify:section:load',e=>initInlineATC(e.target));
  document.addEventListener('shopify:section:select',e=>initInlineATC(e.target));
})();
</script>

<script>
/* ===== Kiwi -> swatch enrichment + selected-size readout ===== */
/* ***** CHANGES HERE: preference order: WAIST → CHEST → BUST → HIP/HIPS → LENGTH/INSEAM ***** */
(function(){
  const SIZE_LOOKUP = ['XS','S','M','L','XL','2XL','3XL','4XL','5XL','6XL'];
  const block = document.querySelector('.atc-main');
  if (!block) return;

  const CACHE_KEY = 'kiwiMap:' + (block.getAttribute('data-cache-key') || location.pathname);
  const CACHE_TTL_MS = 1000 * 60 * 60 * 24 * 7; // 7 days

  const readoutEl = block.querySelector('.inline-size-meta');

  /* ---------- utils ---------- */
  function norm(t){ return (t||'').replace(/\s+/g,' ').trim(); }
  function upper(t){ return norm(t).toUpperCase(); }

  function pickFirstHeader(headers, patterns){
    // headers are already normalized/upper in payload
    for (const rx of patterns){
      const h = headers.find(H => rx.test(H));
      if (h) return h;
    }
    return null;
  }

  function readCache(){
    try{
      const raw = localStorage.getItem(CACHE_KEY);
      if(!raw) return null;
      const obj = JSON.parse(raw);
      if(!obj || !obj.rows || !obj.headers || !obj.ts) return null;
      if(Date.now() - obj.ts > CACHE_TTL_MS) return null;
      return obj;
    }catch(_){ return null; }
  }
  function writeCache(payload){
    try{ localStorage.setItem(CACHE_KEY, JSON.stringify({ts:Date.now(), ...payload})); }catch(_){}
  }

  /* ---------- find kiwi tables ---------- */
  function findCandidateTables(){
    const roots = [
      document.querySelector('#KiwiSizingModal'),
      document.querySelector('.kiwiSizingModal'),
      ...document.querySelectorAll('[class*="Kiwi"][class*="Modal"], [class*="kiwi"][class*="modal"]'),
      document // last resort
    ].filter(Boolean);
    const tables = [];
    for (const r of roots){
      tables.push(...r.querySelectorAll('table'));
      if (tables.length) break; // first place we actually find tables
    }
    return Array.from(new Set(tables));
  }

  function getHeaderCells(table){
    const thead = table.querySelector('thead');
    if (thead) return Array.from(thead.querySelectorAll('th,td')).map(th=>upper(th.textContent));
    const firstRow = table.querySelector('tr');
    if (!firstRow) return [];
    return Array.from(firstRow.children).map(td=>upper(td.textContent));
  }

  /* ---------- build full rows map: { SIZE: {HeaderKey: value, ...} } ---------- */
  function buildRowsFromTable(table){
    const headersRaw = getHeaderCells(table);
    if (headersRaw.length < 2) return {headers:[], rows:{}};

    // Normalize headers and pick likely measurement columns (keep original casing-ish spacing for downstream)
    const headers = headersRaw.map(h=>h.replace(/\s+/g,' ').trim());

    // find size column
    let sizeCol = headers.findIndex(h => /^SIZE$/.test(h));
    if (sizeCol < 0) sizeCol = 0;

    const bodyRows = table.querySelectorAll('tbody tr');
    const rowsEls = bodyRows.length ? bodyRows : table.querySelectorAll('tr');

    const rowsMap = {};
    rowsEls.forEach((tr, idx)=>{
      // if no <tbody>, skip header row
      if (!bodyRows.length && idx === 0) return;

      const cells = Array.from(tr.children).map(td=>norm(td.textContent));
      if (!cells.length) return;

      const sizeKey = upper(cells[sizeCol] || '');
      if (!SIZE_LOOKUP.includes(sizeKey)) return;

      const rowObj = {};
      headers.forEach((h, i)=>{
        if (i === sizeCol) return;
        const val = cells[i] || '';
        if (val) rowObj[h] = val;
      });
      rowsMap[sizeKey] = rowObj;
    });

    return {headers, rows: rowsMap};
  }

  function chooseBestPayload(){
    const tables = findCandidateTables();
    let best = {headers:[], rows:{}}, bestScore = -1;
    for (const t of tables){
      const payload = buildRowsFromTable(t);
      const score = Object.keys(payload.rows).length;
      if (score > bestScore){ bestScore = score; best = payload; }
    }
    return best;
  }

  /* ---------- apply enrichment to swatches ---------- */
  function applyToSwatches(payload){
    const {rows, headers} = payload;
    const btns = block.querySelectorAll('.inline-size-atc .variant-btn');

    // NEW preference order for the extra line:
    // WAIST → CHEST → BUST → HIP/HIPS → LENGTH/INSEAM
    const firstDataHeader =
      pickFirstHeader(headers, [
        /\bWAIST\b/,
        /\bCHEST\b/,
        /\bBUST\b/,
        /\bHIPS?\b/,
        /\b(LENGTH|INSEAM)\b/
      ]) || headers.find((h, idx) => idx !== 0) || '';

    btns.forEach(btn=>{
      const size = upper(btn.getAttribute('data-value') || btn.textContent);
      const row = rows[size] || {};
      const firstVal = row[firstDataHeader] || '';

      // enrich label(s)
      const codeEl = btn.querySelector('.sz-code');
      const extraEl = btn.querySelector('.sz-extra');
      if (codeEl) codeEl.textContent = size;
      if (extraEl) extraEl.textContent = firstVal;
      else if (firstVal){
        btn.innerHTML = '<span class="sz-code">'+size+'</span><span class="sz-extra">'+firstVal+'</span>';
      }

      // store keys/values for readout below title
      const bustKey  = pickFirstHeader(headers, [/\bBUST\b/, /\bCHEST\b/]); // prefer BUST; fall back to CHEST if chart only has CHEST
      const waistKey = pickFirstHeader(headers, [/\bWAIST\b/]);
      const hipKey   = pickFirstHeader(headers, [/\bHIPS?\b/]);
      const lenKey   = pickFirstHeader(headers, [/\b(LENGTH|INSEAM)\b/]);

      if (bustKey)  { btn.dataset.bust    = row[bustKey]  || ''; btn.dataset.bustKey  = bustKey; }
      if (waistKey) { btn.dataset.waist   = row[waistKey] || ''; btn.dataset.waistKey = waistKey; }
      if (hipKey)   { btn.dataset.hip     = row[hipKey]   || ''; btn.dataset.hipKey   = hipKey; }
      if (lenKey)   { btn.dataset.len     = row[lenKey]   || ''; btn.dataset.lenKey   = lenKey; }
    });
  }

  /* ---------- readout rendering ---------- */
  function renderReadoutFrom(btn){
    if (!readoutEl) return;

    const pills = [];
    const bust   = btn.dataset.bust,   bustKey   = btn.dataset.bustKey;
    const waist  = btn.dataset.waist,  waistKey  = btn.dataset.waistKey;
    const hip    = btn.dataset.hip,    hipKey    = btn.dataset.hipKey;
    const len    = btn.dataset.len,    lenKey    = btn.dataset.lenKey;

    function pill(key,val){
      if (!key || !val) return '';
      return '<span class="kv-pill"><span class="kv-key">'+key+':</span> '+val+'</span>';
    }

    pills.push(pill(bustKey, bust));
    pills.push(pill(waistKey, waist));
    pills.push(pill(hipKey, hip));
    pills.push(pill(lenKey, len));

    const html = pills.filter(Boolean).join('');
    if (html){
      readoutEl.innerHTML = html;
      readoutEl.hidden = false;
    }else{
      readoutEl.hidden = true;
      readoutEl.innerHTML = '';
    }
  }

  /* ---------- hydrate flow (cache → DOM → observer) ---------- */
  function hydrateNow(){
    const cached = readCache();
    if (cached && Object.keys(cached.rows||{}).length){
      applyToSwatches(cached);
      const sel = block.querySelector('.variant-btn.selected');
      if (sel) renderReadoutFrom(sel);
      return true;
    }

    const payload = chooseBestPayload();
    if (Object.keys(payload.rows).length){
      writeCache(payload);
      applyToSwatches(payload);
      const sel = block.querySelector('.variant-btn.selected');
      if (sel) renderReadoutFrom(sel);
      return true;
    }
    return false;
  }

  function idle(fn){
    if ('requestIdleCallback' in window){ requestIdleCallback(fn, {timeout:1200}); }
    else { setTimeout(fn, 0); }
  }

  let hydrated = false;
  const target = block.querySelector('.inline-size-atc .variant-container') || block;

  if ('IntersectionObserver' in window && target){
    const io = new IntersectionObserver((entries)=>{
      const vis = entries.some(e=>e.isIntersecting || e.intersectionRatio > 0);
      if (vis && !hydrated){
        hydrated = true; io.disconnect();
        idle(()=> {
          if (hydrateNow()) return;
          const mo = new MutationObserver(()=>{ if (hydrateNow()) mo.disconnect(); });
          mo.observe(document.documentElement,{childList:true,subtree:true});
          setTimeout(()=>mo.disconnect(), 8000);
        });
      }
    }, {root:null, rootMargin:'200px 0px', threshold:0.01});
    io.observe(target);
  }else{
    idle(()=>{
      if (hydrateNow()) return;
      const mo = new MutationObserver(()=>{ if (hydrateNow()) mo.disconnect(); });
      mo.observe(document.documentElement,{childList:true,subtree:true});
      setTimeout(()=>mo.disconnect(), 8000);
    });
  }

  // Re-hydrate after opening size chart (user intent)
  document.addEventListener('click', (e)=>{
    const t = e.target.closest('#KiwiSizingChart,[data-kiwi-sizing-trigger],[data-kiwi-toggle],a[href*="KiwiSizing"]');
    if (t){ setTimeout(()=> idle(hydrateNow), 600); }
  });

  // Hook into your existing selection logic to update the readout
  document.addEventListener('click', (e)=>{
    const btn = e.target.closest('.inline-size-atc .variant-btn');
    if (!btn || btn.classList.contains('out-of-stock') || btn.disabled) return;
    renderReadoutFrom(btn);
  });

  // Also update when selection is programmatic (variantId change)
  const variantInput = block.querySelector('#variantId, [name="id"]');
  if (variantInput){
    variantInput.addEventListener('change', function(){
      const btn = block.querySelector('.variant-btn[data-variant-id="'+this.value+'"]');
      if (btn) renderReadoutFrom(btn);
    });
  }
})();
</script>

<!-- Instant-click booster -->
<style>.inline-size-atc .variant-btn{pointer-events:auto !important}</style>
<script>
(function instantSwatchBootstrap(){
  function onEarlyClick(e){
    const btn = e.target.closest('.inline-size-atc .variant-btn');
    if (!btn) return;
    if (btn.classList.contains('out-of-stock') || btn.disabled) return;

    const block = btn.closest('.atc-main');
    if (!block) return;

    block.querySelectorAll('.variant-btn').forEach(b => b.classList.remove('selected'));
    btn.classList.add('selected');

    const variantInput = block.querySelector('#variantId, [name="id"]');
    const mainBtn = block.querySelector('.scb-main-btn');
    const selectedVariantId = btn.getAttribute('data-variant-id') || '';

    if (variantInput){
      variantInput.disabled = false;
      variantInput.value = selectedVariantId;
      try { variantInput.dispatchEvent(new Event('change', { bubbles: true })); } catch(_) {}
    }
    if (mainBtn){
      mainBtn.disabled = false;
      mainBtn.removeAttribute('aria-disabled');
    }
  }

  document.addEventListener('click', onEarlyClick, true);

  const killTimer = setInterval(function(){
    const block = document.querySelector('.atc-main');
    if (block && block.dataset.inited === '1'){
      document.removeEventListener('click', onEarlyClick, true);
      clearInterval(killTimer);
    }
  }, 3000);

  setTimeout(() => {
    document.removeEventListener('click', onEarlyClick, true);
    clearInterval(killTimer);
  }, 20000);
})();
</script>

<script>
/* ===== Size-chart modal fed from Kiwi tables ===== */
(function(){
  const SIZE_LOOKUP = ['XXS','XS','S','M','L','XL','2XL','3XL','4XL','5XL','6XL'];

  const productTitle = {{ product.title | json }};
  const variantBtns  = document.querySelectorAll('.inline-size-atc .variant-btn');
  const sizeToVariant = {};
  const sizeOOS = {};
  variantBtns.forEach(b=>{
    const size = (b.getAttribute('data-value') || b.textContent || '').trim().toUpperCase();
    sizeToVariant[size] = b.getAttribute('data-variant-id') || null;
    sizeOOS[size] = b.classList.contains('out-of-stock') || b.disabled;
  });

  const form = document.querySelector('form.atc-form') || document.querySelector('form[action^="/cart/add"]');
  const variantInput = form && (form.querySelector('#variantId') || form.querySelector('[name="id"]'));

  const modal   = document.getElementById('ksc-modal');
  const backdrop= document.getElementById('ksc-backdrop');
  const tableEl = modal.querySelector('.ksc-table');
  const titleEl = modal.querySelector('#ksc-title');
  const noteEl  = modal.querySelector('#ksc-note');
  const addBtn  = modal.querySelector('#ksc-add');

  let selectedSize = null; // normalized size, e.g. "M"
  let cachePayload = null;

  /* ---------- Kiwi parsing ---------- */
  function norm(t){ return (t||'').replace(/\s+/g,' ').trim(); }
  function upper(t){ return norm(t).toUpperCase(); }

  function findKiwiTables(){
    const roots = [
      document.querySelector('#KiwiSizingModal'),
      document.querySelector('.kiwiSizingModal'),
      ...document.querySelectorAll('[class*="Kiwi"][class*="Modal"], [class*="kiwi"][class*="modal"]'),
      document
    ].filter(Boolean);
    const tables = [];
    for (const r of roots){
      tables.push(...r.querySelectorAll('table'));
      if (tables.length) break;
    }
    return Array.from(new Set(tables));
  }
  function getHeaderCells(t){
    const thead = t.querySelector('thead');
    if (thead) return Array.from(thead.querySelectorAll('th,td')).map(th=>upper(th.textContent));
    const first = t.querySelector('tr');
    if (!first) return [];
    return Array.from(first.children).map(td=>upper(td.textContent));
  }
  function buildRowsFromTable(t){
    const headersRaw = getHeaderCells(t);
    if (headersRaw.length < 2) return {headers:[], rows:[], note:''};
    const headers = headersRaw.map(h=>h.replace(/\s+/g,' ').trim());

    let sizeCol = headers.findIndex(h=>/^SIZE$/.test(h));
    if (sizeCol < 0) sizeCol = 0;

    const bodyRows = t.querySelectorAll('tbody tr');
    const rowsEls = bodyRows.length ? bodyRows : t.querySelectorAll('tr');

    const records = [];
    rowsEls.forEach((tr, idx)=>{
      if (!bodyRows.length && idx===0) return;
      const cells = Array.from(tr.children);
      if (!cells.length) return;

      const sizeText = upper(norm(cells[sizeCol]?.textContent || ''));
      if (!SIZE_LOOKUP.includes(sizeText)) return;

      const rec = { SIZE:sizeText };
      cells.forEach((td,i)=>{
        if (i===sizeCol) return;
        const key = headers[i] || ('COL'+i);
        rec[key] = norm(td.textContent);
      });
      records.push(rec);
    });

    // Optional note (from Kiwi HTML block)
    let note = '';
    const htmlBlock = t.closest('.ks-chart-individual')?.querySelector('.ks-html-content');
    if (htmlBlock) note = htmlBlock.textContent.trim();

    return {headers, rows:records, note};
  }

  async function ensureKiwiLoaded(){
    const hasAnyTable = findKiwiTables().length > 0;
    if (hasAnyTable) return;
    const hiddenTrigger = document.querySelector('#KiwiSizingChart');
    if (hiddenTrigger){
      hiddenTrigger.click();
      await new Promise(r=>setTimeout(r, 500));
      document.querySelectorAll('.ks-modal, .kiwiSizingModal, [id*="Kiwi"][class*="Modal"]').forEach(el=>{ el.style.display='none'; });
    }
  }

  function getKiwiPayload(){
    if (cachePayload) return cachePayload;
    const tables = findKiwiTables();
    let best = null, bestScore = -1;
    for (const t of tables){
      const p = buildRowsFromTable(t);
      const s = p.rows.length;
      if (s > bestScore){ bestScore = s; best = p; }
    }
    cachePayload = best;
    return best;
  }

  /* ---------- Modal rendering ---------- */
  function renderModal(payload){
    titleEl.textContent = productTitle || 'Size Chart';
    tableEl.innerHTML = '';

    if (!payload || !payload.rows || !payload.rows.length){
      tableEl.innerHTML = '<tr><td style="padding:16px;">Size chart unavailable.</td></tr>';
      noteEl.hidden = true;
      return;
    }

   const measHeaders = payload.headers
  .filter(h => h && h.trim() !== '')      // drop empty headers
  .filter(h => upper(h) !== 'SIZE');       // keep only measurement columns

    const thead = document.createElement('thead');
    const trh = document.createElement('tr');
    const thRadio = document.createElement('th'); thRadio.className='ksc-radio';
    trh.appendChild(thRadio);
    const thSize = document.createElement('th'); thSize.textContent='SIZE';
    trh.appendChild(thSize);
    measHeaders.forEach(h=>{ const th=document.createElement('th'); th.textContent=h; trh.appendChild(th); });
    thead.appendChild(trh);
    tableEl.appendChild(thead);

    const tbody = document.createElement('tbody');

    payload.rows.forEach(rec=>{
      const size = rec.SIZE;
      const tr = document.createElement('tr');
      const tdRadio = document.createElement('td'); tdRadio.className='ksc-radio';
      const input = document.createElement('input');
      input.type='radio'; input.name='kscSize'; input.value=size; input.setAttribute('aria-label', size);
      tdRadio.appendChild(input);
      tr.appendChild(tdRadio);

      const tdSize = document.createElement('td'); tdSize.textContent = size;
      tr.appendChild(tdSize);

      measHeaders.forEach(h=>{
        const td = document.createElement('td');
        td.textContent = rec[h] || '';
        tr.appendChild(td);
      });

      const variantId = sizeToVariant[size] || null;
      const disabled = !variantId || !!sizeOOS[size];
      if (disabled){
        input.disabled = true;
        tr.setAttribute('aria-disabled','true');
      }

      function selectRow(){
        const outOfStockAlert = document.getElementById('out-of-stock-alert');
        if (input.disabled) return;
        modal.querySelectorAll('tbody tr').forEach(r=>r.classList.remove('selected'));
        input.checked = true;
        tr.classList.add('selected');
        selectedSize = size;

        if (sizeOOS[size]) {
          outOfStockAlert.textContent = `The ${size} is currently out of stock.`;
          outOfStockAlert.style.display = 'block';
        } else {
          outOfStockAlert.style.display = 'none';
        }
      }

      tr.addEventListener('click', selectRow);
      input.addEventListener('change', selectRow);

      const currentId = variantInput && variantInput.value;
      if (variantId && currentId && variantId === currentId){
        setTimeout(selectRow, 0);
      }

      tbody.appendChild(tr);
    });

    tableEl.appendChild(tbody);

    if (payload.note){
      noteEl.textContent = payload.note.replace(/\s+/g,' ').trim();
      noteEl.hidden = false;
    }else{
      noteEl.hidden = true;
    }
  }

  function openModal(){
    backdrop.style.display='block';
    modal.style.display='block';
    document.body.style.overflow = 'hidden';
  }
  function closeModal(){
    modal.style.display='none';
    backdrop.style.display='none';
    document.body.style.overflow = '';
  }

  addBtn.addEventListener('click', function(){
    if (!selectedSize){
      const first = modal.querySelector('input[name="kscSize"]:not(:disabled)');
      if (first){ first.click(); }
    }
    if (!selectedSize){ return; }

    const vid = sizeToVariant[selectedSize];
    if (!vid || !variantInput) return;

    variantInput.disabled = false;
    variantInput.value = vid;
    try { variantInput.dispatchEvent(new Event('change', {bubbles:true})); } catch(_) {}
    if (form){
      form.requestSubmit ? form.requestSubmit() : form.submit();
    }
    closeModal();
  });

  modal.querySelector('.ksc-close').addEventListener('click', closeModal);
  backdrop.addEventListener('click', closeModal);

  document.querySelectorAll('.ks-open-btn').forEach(btn=>{
    btn.addEventListener('click', async function(){
      await ensureKiwiLoaded();
      const payload = getKiwiPayload();
      renderModal(payload);
      openModal();
    });
  });
})();
</script> 

