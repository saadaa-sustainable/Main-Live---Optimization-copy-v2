<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Pick Any 2 / Pick Any 4 - Dynamic Banners & Cards</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root{
      --sticky-offset: 120px; /* updated by JS */
    }

    /* ——— Toggles ——— */
    .toggle-row { display: flex; justify-content: center; gap: 1rem; }
    .toggle-btn {
      background: #fff; color: #222; border: none; outline: none; border-radius: 8px;
      font-size: 11px; font-weight: 500; padding: 3px 13px; cursor: pointer;
      transition: background-color 0.22s cubic-bezier(.44,1.34,.38,1.11),
        color 0.22s cubic-bezier(.44,1.34,.38,1.11),
        transform 0.23s cubic-bezier(.44,1.34,.38,1.11),
        box-shadow 0.22s cubic-bezier(.44,1.34,.38,1.11);
      white-space: nowrap; position: relative; z-index: 1;
    }
    .toggle-btn.active { background: #000; color: #fff; transform: scale(1.10); box-shadow: 0 1px 4px 0 rgba(195,106,78,0.13); }
    .toggle-section { display: none; }
    .toggle-section.active { display: block; }

    /* ——— Category Heading ——— */
    .banner-row{ scroll-margin-top: calc(var(--sticky-offset) + 8px); }
    .banner-text{
      display:block; width: 100%; background: #f6f3f1; color:#222;
      padding: 6px 14px; font-size: 20px; font-weight:700; letter-spacing:.2px;
    }
    @media (min-width: 701px){
      .banner-text{ font-size:18px; padding:14px 16px; }
    }

    /* ——— GRID ——— */
    .pc-grid-section { padding: 0 0 2rem 0; background: #f6f3f1; }
    .pc-grid-outer { position: relative; top:7px; }
    .pc-grid {
      display: grid; grid-template-columns: repeat(2, 1fr);
      gap: 8px; margin: 0 10px;
    }
    @media (min-width: 701px) {
      .pc-grid { grid-template-columns: repeat(6, 1fr); gap: 12px; }
      .toggle-btn { font-size: 16px; }
    }

    .pc-grid-item {
      border-radius: 12px; overflow: hidden; display: flex; flex-direction: column;
      cursor: pointer; transition: box-shadow 0.2s; background: #fff;
    }
    .pc-grid-item:hover { box-shadow: 0 6px 18px rgba(0,0,0,0.16); }

    .pc-product-image-wrapper { position: relative; width: 100%; overflow: hidden; height: auto; }
    .pc-product-image-wrapper img { display: block; width: 100%; height: auto; }

    /* —— SAVE pill —— */
    .pc-save-pill{
      position: absolute;
      left: 6px;
      top: 5px;
      z-index: 0;
      background: #209020;
      color: #fff;
      padding: 0px 5px;
      border-radius: 4px;
      font-size: 10px; font-weight: 800; letter-spacing: .3px;
      box-shadow: 0 2px 6px rgba(0,0,0,.12);
      text-transform: uppercase;
    }

    a.pc-grid-link { text-decoration: none; color: inherit; display: block; }

    #sticky-toggle-row {
      position: sticky; top: 76px; z-index: 1; background: #f6f3f1;
          padding-top: 12px;
    padding-bottom: 12px; transition: box-shadow 0.15s;
    }
    .grid-loading { display:flex;align-items:center;justify-content:center;font-size:14px;color:#ba8367; padding:2.7em 0; font-weight: 500; }
    .pc-grid-empty { padding:2em;text-align:center;color:#b08065;font-size:13px; }

    /* ——— Product Title ——— */
    .pc-product-title{
      padding: 8px 10px 10px; font-size: 11px; line-height: 1.3;
      color: #fff; background: #000; display: -webkit-box;
      -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;
      text-overflow: ellipsis; min-height: 2.6em; font-weight: 600;
    }
    @media (min-width: 701px){ .pc-product-title{         font-size: 15px;
        letter-spacing: 0.5px; }
}

    /* ——— Sticky bottom category bar ——— */
    .category-bottom-bar{
      position: fixed; bottom: 62px; left: 0; right: 0; z-index: 500;
      background: #f6f3f1; border-top: 1px solid rgba(0,0,0,0.08);
      box-shadow: 0 -6px 16px rgba(0,0,0,0.06);
      padding: 8px 10px calc(8px + env(safe-area-inset-bottom));
    }
    .category-bottom-bar .cat-row{
      display: grid; grid-template-columns: repeat(4, 1fr);
      gap: 8px; max-width: 980px; margin: 0 auto;
    }
    .cat-btn{
      background: #fff; color: #222; border: none; border-radius: 10px;
      padding: 5px 4px; font-size: 12px; letter-spacing: .2px; cursor: pointer;
      transition: transform .15s ease, box-shadow .15s ease, background .2s ease;
    }
    .cat-btn:active{ transform: scale(.97); }
    .cat-btn.active{ background: #000; box-shadow: 0 2px 10px rgba(195,106,78,0.18); color: #fff; }

    body { padding-bottom: calc(64px + env(safe-area-inset-bottom)); }
    @media (min-width: 701px){
      .cat-btn{ font-size: 13px; padding: 12px 10px; }
      body { padding-bottom: calc(72px + env(safe-area-inset-bottom)); }

       .category-bottom-bar{
      position: fixed; bottom: 0; left: 0; right: 0; z-index: 1000;
 }
    }
  </style>
</head>
<body>
  <!-- Toggle Buttons -->
  <div class="toggle-row" id="sticky-toggle-row">
    <button class="toggle-btn active" id="toggle-pick2">Pick any 2</button>
    <button class="toggle-btn" id="toggle-pick4">Pick any 4</button>
  </div>

  <!-- PICK ANY 2 SECTION -->
  <div class="toggle-section active" id="section-pick2">
    <div class="banner-row" id="pick2-topwear-banner"><span class="banner-text">Topwear</span></div>
    <div class="pc-grid-section"><div class="pc-grid-outer" data-banner="pick2-topwear"><div class="pc-grid"><div class="grid-loading">Loading…</div></div></div></div>

    <div class="banner-row" id="pick2-bottomwear-banner"><span class="banner-text">Bottomwear</span></div>
    <div class="pc-grid-section"><div class="pc-grid-outer" data-banner="pick2-bottomwear"><div class="pc-grid"><div class="grid-loading">Loading…</div></div></div></div>

    <div class="banner-row" id="pick2-dresses-banner"><span class="banner-text">Dresses</span></div>
    <div class="pc-grid-section"><div class="pc-grid-outer" data-banner="pick2-dresses"><div class="pc-grid"><div class="grid-loading">Loading…</div></div></div></div>

    <div class="banner-row" id="pick2-menswear-banner"><span class="banner-text">Menswear</span></div>
    <div class="pc-grid-section"><div class="pc-grid-outer" data-banner="pick2-menswear"><div class="pc-grid"><div class="grid-loading">Loading…</div></div></div></div>
  </div>

  <!-- PICK ANY 4 SECTION -->
  <div class="toggle-section" id="section-pick4">
    <div class="banner-row" id="pick4-topwear-banner"><span class="banner-text">Topwear</span></div>
    <div class="pc-grid-section"><div class="pc-grid-outer" data-banner="pick4-topwear"><div class="pc-grid"><div class="grid-loading">Loading…</div></div></div></div>

    <div class="banner-row" id="pick4-bottomwear-banner"><span class="banner-text">Bottomwear</span></div>
    <div class="pc-grid-section"><div class="pc-grid-outer" data-banner="pick4-bottomwear"><div class="pc-grid"><div class="grid-loading">Loading…</div></div></div></div>

    <div class="banner-row" id="pick4-dresses-banner"><span class="banner-text">Dresses</span></div>
    <div class="pc-grid-section"><div class="pc-grid-outer" data-banner="pick4-dresses"><div class="pc-grid"><div class="grid-loading">Loading…</div></div></div></div>

    <div class="banner-row" id="pick4-menswear-banner"><span class="banner-text">Menswear</span></div>
    <div class="pc-grid-section"><div class="pc-grid-outer" data-banner="pick4-menswear"><div class="pc-grid"><div class="grid-loading">Loading…</div></div></div></div>
  </div>

  <!-- Sticky Bottom Category Bar -->
  <div class="category-bottom-bar" id="category-bottom-bar">
    <div class="cat-row">
      <button class="cat-btn active" data-cat="topwear">Tops</button>
      <button class="cat-btn" data-cat="bottomwear">Bottoms</button>
      <button class="cat-btn" data-cat="dresses">Dresses</button>
      <button class="cat-btn" data-cat="menswear">Menswear</button>
    </div>
  </div>

<script>
  // Shopify API Settings
  const SHOP_DOMAIN = "saadaa-design.myshopify.com";
  const STOREFRONT_ACCESS_TOKEN = "388bd37219d8ab7daee1c58a23c03cc8";

  // Tag map
  const bannerTagMap = {
    "pick2-topwear":    "pack of 2 topwear",
    "pick2-bottomwear": "pack of 2 bottomwear",
    "pick2-dresses":    "pick any 2 dresses",
    "pick2-menswear":   "pick any 2 menswear",
    "pick4-topwear":    "pack of 4 topwear",
    "pick4-bottomwear": "pack of 4 bottomwear",
    "pick4-dresses":    "pick any 4 dresses",
    "pick4-menswear":   "pick any 4 menswear",
  };

  let currentCategory = 'topwear'; // default
  const inr = new Intl.NumberFormat('en-IN', { maximumFractionDigits: 0 });

  function escapeHtml(str = "") {
    return String(str)
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  /* Compute sticky offset for scroll-margin */
  function computeStickyOffset(){
    const stickyToggle = document.getElementById('sticky-toggle-row');
    const stickyH = stickyToggle ? stickyToggle.getBoundingClientRect().height : 0;
    const candidates = document.querySelectorAll('header, .site-header, .shopify-section-header-sticky, .announcement-bar');
    let topFixed = 0;
    candidates.forEach(el => {
      const cs = getComputedStyle(el);
      if ((cs.position === 'fixed' || cs.position === 'sticky')) {
        const rect = el.getBoundingClientRect();
        if (rect.top <= 1) topFixed += rect.height;
      }
    });
    const total = Math.round(stickyH + topFixed + 12);
    document.documentElement.style.setProperty('--sticky-offset', total + 'px');
  }

  // Fetch products by tag (includes variant prices for savings)
  async function fetchProductsByTag(tag) {
    const query = `
    {
      products(first: 20, query: "tag:'${tag}'") {
        edges {
          node {
            id
            title
            handle
            publishedAt
            images(first: 1) { edges { node { url altText } } }
            variants(first: 20) {
              edges {
                node {
                  price { amount currencyCode }
                  compareAtPrice { amount currencyCode }
                }
              }
            }
          }
        }
      }
    }`;
    const response = await fetch(`https://${SHOP_DOMAIN}/api/2023-10/graphql.json`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Shopify-Storefront-Access-Token": STOREFRONT_ACCESS_TOKEN
      },
      body: JSON.stringify({ query })
    });
    const json = await response.json();
    if (!json.data || !json.data.products) return [];
    return json.data.products.edges
      .map(edge => edge.node)
      .filter(prod => prod.publishedAt);
  }

  // Compute max saving across variants
  function getSavingInfo(prod){
    let maxSave = 0;
    let currency = 'INR';
    const edges = prod.variants?.edges || [];
    for (const v of edges) {
      const price = parseFloat(v?.node?.price?.amount || '0');
      const compare = parseFloat(v?.node?.compareAtPrice?.amount || '0');
      const diff = compare - price;
      if (diff > maxSave) {
        maxSave = diff;
        currency = v?.node?.price?.currencyCode || currency;
      }
    }
    return { amount: maxSave, currency };
  }

  // Build grid (adds SAVE pill)
  function buildGridHTML(products) {
    if (!products.length) return `<div class="pc-grid-empty">No products found.</div>`;

    return products.map(prod => {
      const imgUrl = prod.images?.edges?.[0]?.node?.url || "";
      const theAlt = prod.images?.edges?.[0]?.node?.altText || prod.title || "";
      const title  = escapeHtml(prod.title || "");
      const saving = getSavingInfo(prod);
      const showPill = saving.amount > 0.5;
      const rupees = inr.format(Math.round(saving.amount));

      return `
        <a class="pc-grid-link" href="/products/${prod.handle}">
          <div class="pc-grid-item">
            <div class="pc-product-image-wrapper">
              ${showPill ? `<span class="pc-save-pill">SAVE ₹${rupees}</span>` : ``}
              <img src="${imgUrl}" alt="${escapeHtml(theAlt)}" loading="lazy" />
            </div>
            <div class="pc-product-title">${title}</div>
          </div>
        </a>
      `;
    }).join("");
  }

  // Load products for all grids in the visible section
  async function loadGridsFor(section) {
    section.querySelectorAll('.pc-grid-outer').forEach(async (outer) => {
      const bannerKey = outer.getAttribute('data-banner');
      const tag = bannerTagMap[bannerKey];
      const grid = outer.querySelector('.pc-grid');
      grid.innerHTML = `<div class="grid-loading">Loading…</div>`;
      if (!tag) { grid.innerHTML = `<div class="pc-grid-empty">No tag set.</div>`; return; }
      try {
        const products = await fetchProductsByTag(tag);
        grid.innerHTML = buildGridHTML(products);
      } catch (e) {
        grid.innerHTML = `<div class="pc-grid-empty">Error loading products.</div>`;
      }
    });
  }

  const btnPick2 = document.getElementById("toggle-pick2");
  const btnPick4 = document.getElementById("toggle-pick4");
  const sectionPick2 = document.getElementById("section-pick2");
  const sectionPick4 = document.getElementById("section-pick4");

  function activePrefix(){ return sectionPick2.classList.contains('active') ? 'pick2' : 'pick4'; }
  function activeSectionEl(){ return sectionPick2.classList.contains('active') ? sectionPick2 : sectionPick4; }

  // Helper: set active category button + remember it
  function setActiveCategory(cat){
    currentCategory = cat;
    document.querySelectorAll('.cat-btn').forEach(b => b.classList.remove('active'));
    const btn = document.querySelector(`.cat-btn[data-cat="${cat}"]`);
    if (btn) btn.classList.add('active');
  }

  // --- Lock to avoid the "snap back to previous" during smooth scroll ---
  let manualHighlightLockUntil = 0; // timestamp (ms)

  function nowMs(){ return (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now(); }

  // Programmatic scroll: compute exact offset (don't rely on scroll-margin)
  function scrollToCategory(cat){
    const prefix = activePrefix();
    const el = document.getElementById(`${prefix}-${cat}-banner`)
      || document.querySelector(`.pc-grid-outer[data-banner="${prefix}-${cat}"]`);
    if(!el) return;

    const headerOffset = getStickyOffsetPx();
    const rect = el.getBoundingClientRect();
    const absoluteTop = rect.top + window.pageYOffset;

    // lock highlight while smooth scrolling
    manualHighlightLockUntil = nowMs() + 800; // ~0.8s lock
    setActiveCategory(cat);

    window.scrollTo({
      top: Math.max(absoluteTop - headerOffset, 0),
      behavior: 'smooth'
    });

    // snap state once animation likely finished
    setTimeout(updateActiveCatFromScroll, 850);
  }

  // —— Auto-activate category when scrolling ——
  let ticking = false;
  function getStickyOffsetPx(){
    const v = getComputedStyle(document.documentElement).getPropertyValue('--sticky-offset') || '0';
    return parseInt(v, 10) || 0;
  }

  // Only switch once the NEXT title crosses the sticky boundary
  function updateActiveCatFromScroll(){
    // Respect lock if user just tapped a button
    if (nowMs() < manualHighlightLockUntil) return;

    if (ticking) return;
    ticking = true;

    requestAnimationFrame(() => {
      const section = activeSectionEl();
      const prefix  = activePrefix();

      const heads = Array.from(
        section.querySelectorAll(`.banner-row[id^="${prefix}-"][id$="-banner"]`)
      );
      if (!heads.length) { ticking = false; return; }

      const offset = getStickyOffsetPx();
      const hysteresis = 6; // px cushion to avoid flicker

      // First heading whose top is below the sticky line
      const firstBelowIdx = heads.findIndex(h => (h.getBoundingClientRect().top - offset) > hysteresis);

      let currentIdx;
      if (firstBelowIdx === -1) {
        // bottom of page: highlight last
        currentIdx = heads.length - 1;
      } else if (firstBelowIdx === 0) {
        // none crossed yet: highlight first
        currentIdx = 0;
      } else {
        // highlight the last one that already crossed
        currentIdx = firstBelowIdx - 1;
      }

      const id  = heads[currentIdx].id; // e.g. pick2-bottomwear-banner
      const cat = id.replace(`${prefix}-`, '').replace(`-banner`, '');
      setActiveCategory(cat);

      ticking = false;
    });
  }

  // Top toggles — switch section, load, recompute offset, re-sync active category
  btnPick2.onclick = function() {
    btnPick2.classList.add("active");
    btnPick4.classList.remove("active");
    sectionPick2.classList.add("active");
    sectionPick4.classList.remove("active");
    computeStickyOffset();
    loadGridsFor(sectionPick2);
    requestAnimationFrame(() => {
      updateActiveCatFromScroll();
      scrollToCategory(currentCategory);
    });
  };
  btnPick4.onclick = function() {
    btnPick4.classList.add("active");
    btnPick2.classList.remove("active");
    sectionPick4.classList.add("active");
    sectionPick2.classList.remove("active");
    computeStickyOffset();
    loadGridsFor(sectionPick4);
    requestAnimationFrame(() => {
      updateActiveCatFromScroll();
      scrollToCategory(currentCategory);
    });
  };

  // Bottom bar categories
  document.querySelectorAll('#category-bottom-bar .cat-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      scrollToCategory(btn.dataset.cat);
    });
  });

  // Scroll/resize listeners to auto-activate
  window.addEventListener('scroll', updateActiveCatFromScroll, { passive: true });
  window.addEventListener('resize', () => {
    computeStickyOffset();
    updateActiveCatFromScroll();
  });

  // Initial load
  document.addEventListener("DOMContentLoaded", () => {
    computeStickyOffset();
    loadGridsFor(sectionPick2);
    updateActiveCatFromScroll();
  });
</script>


</body>
</html>>